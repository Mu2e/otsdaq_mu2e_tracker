# -*- mode:tcl -*- 
#------------------------------------------------------------------------------
# usage: artdaqDriver -c driver_tracker_vst.fcl
#------------------------------------------------------------------------------
#include "Offline/fcl/standardServices.fcl"

process_name: TestTrackerVST001

events_to_generate : 10
run_number         : 101

source: {
    module_type: "ArtdaqInput"
}

services: { @table::Services.Reco 
    ArtdaqFragmentNamingServiceInterface: {
	helper_plugin: "Mu2e"
	service_provider: "ArtdaqFragmentNamingService"
    }
    ArtdaqSharedMemoryServiceInterface: {
	resume_after_timeout: false
	service_provider: "ArtdaqSharedMemoryService"
	waiting_time: 1
    }

    DbService: {
	dbName: "mu2e_conditions_prd"
	purpose: "EMPTY"
	verbose: 0
	version: ""
    }
}

#------------------------------------------------------------------------------
# this is the FCL structure passed to the fragmentgenerator (TrackerVST*)
#------------------------------------------------------------------------------
fragment_receiver: {
    generator              : TrackerVST001  # daq generator plug-in type (defines the shared lib to load)
    fragment_type          : Mu2e           # generator data fragment type
    nEvents                :  1             # don't neeeed this one here
    nSkip                  :  1             # 

    rawOutput              : false
    rawOutputFile          : "/tmp/TrackerVST001.bin"
    sendEmpties            : false
    debugLevel             : 0

    test                   : "test_004"     # test mode
    dtc_id                 : -1             # use $DTCLIB_DTC
    roc_mask               : 0x1            # for annex tests - just one ROC
    requestsAhead          :  1             # read digis - what it should be ?
    heartbeatsAfter        : 16
    request_delay          : 20000

    board_id               : 0
    fragment_id            : 0
    max_fragment_size_bytes: 0x100000

    destinations: {}

    routing_table_config: {
        use_routing_manager: false
    }
}

event_builder: {
    use_art                             : true
    expected_fragments_per_event        : 1
    print_event_store_stats             : false
    verbose                             : false
    events_expected_in_SimpleQueueReader: @local::events_to_generate
    init_fragment_count                 : 0
    buffer_count                        : 1
    max_fragment_size_bytes             : 0x100000
}

physics: {
    analyzers:   {
	dtcDump:     {
	    module_type: DTCEventDump
	    raw_output_file: "DTCEventDump.bin" # Will have timestamp inserted
	    raw_output_in_detector_emulator_format: false
	}
    }
    
    # a1: [ dtcDump ]
    a1 : [ ]
    e1: [ out1, rootout ]
}

outputs: {
    rootout:  {
	module_type: RootOutput
	fileName: "tracker_vst_vadim_101.root"
	compressionLevel: 0
    }
    out1:  {
	module_type: FileDumperOutput
	wantProductFriendlyClassName: true
    }
}

# outputs: {
#     rootNetOutput: {
# 	SelectEvents: []
# 	destinations: {}
# 	host_map: []
# 	module_type: "RootNetOutput"
# 	outputCommands: [
# 			 "drop *_*_*_*",
# 			 "keep mu2e::IntensityInfo*_*_*_*",
# 			 "keep mu2e::CaloHits_CaloHitMakerFast_caphri_*"
# 			]
# 	routing_table_config: {
# 	    use_routing_manager: false
# 	}
#     }
# }
