#
* ------------------------------------------------------------------------------
* reading data (from Monica)
* ------------------------------------------------------------------------------
* 1) after each DIGIs power up, run control_ROC.py on trackerpi1             
1. start control_ROC.py on the PI
   1.a : let serial drives commands to DIGI
   1.b : do alignment, what is alignment ?
   1.c : read smth, why ?
   1.d : in the end, let fiber drive commands to DIGI
#+begin_src     set_digi_rw -s 1                                             
mu2e@trackerpi1:~/trackerScripts $ python3 control_ROC.py /dev/ttyUSB0 115200
reading
Waiting for ARM to connect
==========================
('Connected to ARM on', '/dev/ttyUSB0')
set_digi_rw -s 1
 ** Enabling DIGI signals via serial. Remember to disable with -s 0 to let fiber drive them again!!
(94, 1)
{'Enable/disable DIGI signals via SERIAL/FIBER with -s 1/0. Reading back: ': 1}
Ending...
#+end_src
#+begin_src  ## these are commands issued at the control_ROC.py prompt (may be invisible)
set_digi_rw –s 1
find_alignment
# enable all channels
# read -a 4 -t 0 -s 1 -l 8 -T 10 -m 3 -p 1 -C FFFFFFFF -D FFFFFFFF -E FFFFFFFF
# enable just one channel per lane
read -a 4 -t 0 -s 1 -l 8 -T 10 -m 3 -p 1 -C 0  -D 1400 -E 88000000
# enable 32 channels
read -a 4 -t 0 -s 1 -l 8 -T 10 -m 3 -p 1 -C 0  -D 0 -E FFFFFFFF
set_digi_rw   –s 0
#+end_src
** examples of the control_ROC.py output                                     
#+begin_src                   find_alignment                                 
mu2e@trackerpi1:~/trackerScripts $ python3 control_ROC.py /dev/ttyUSB0 115200
reading
Waiting for ARM to connect
==========================
('Connected to ARM on', '/dev/ttyUSB0')
set_digi_rw -s 1
 ** Enabling DIGI signals via serial. Remember to disable with -s 0 to let fiber drive them again!!
(94, 1)
{'Enable/disable DIGI signals via SERIAL/FIBER with -s 1/0. Reading back: ': 1}
find_alignment
(103, 159)
('EyeMonitorWidth', 4)
('IfPatternCheck', 1)
 ******   Iteration 0   ******
ADCPhase 0                | Ailgnment        | Bitslip          | Pttn 0x263
ADC#     Straw#   Active  | Complete Error   | Done     Step    | Fail    
-----------------------------------------------------------------------------------
0        91       *       | *                | *        8       |         
1        85       *       | *                | *        8       |         
2        79       *       | *                | *        8       |         
3        73       *       | *                | *        7       |         
4        67       *       | *                | *        8       |         
5        61       *       | *                | *        8       |         
6        55       *       | *                | *        8       |         
7        49       *       | *                | *        8       |         
-----------------------------------------------------------------------------------
8        43       *       | *                | *        8       |         
9        37       *       | *                | *        8       |         
10       31       *       | *                | *        8       |         
11       25       *       | *                | *        8       |         
12       19       *       | *                | *        8       |         
13       13       *       | *                | *        8       |         
14       7        *       | *                | *        9       |         
15       1        *       | *                | *        9       |         
-----------------------------------------------------------------------------------
16       90       *       | *                | *        5       |         
17       84       *       | *                | *        6       |         
18       78       *       | *                | *        6       |         
19       72       *       | *                | *        6       |         
20       66       *       | *                | *        6       |         
21       60       *       | *                | *        6       |         
22       54       *       | *                | *        6       |         
23       48       *       | *                | *        5       |         
-----------------------------------------------------------------------------------
24       42       *       | *                | *        6       |         
25       36       *       | *                | *        6       |         
26       30       *       | *                | *        6       |         
27       24       *       | *                | *        6       |         
28       18       *       | *                | *        6       |         
29       12       *       | *                | *        6       |         
30       6        *       | *                | *        7       |         
31       0        *       | *                | *        7       |         
-----------------------------------------------------------------------------------
32       93       *       | *                | *        8       |         
33       87       *       | *                | *        8       |         
34       81       *       | *                | *        8       |         
35       75       *       | *                | *        7       |         
36       69       *       | *                | *        8       |         
37       63       *       | *                | *        8       |         
38       57       *       | *                | *        8       |         
39       51       *       | *                | *        8       |         
-----------------------------------------------------------------------------------
40       45       *       | *                | *        8       |         
41       39       *       | *                | *        8       |         
42       33       *       | *                | *        8       |         
43       27       *       | *                | *        8       |         
44       21       *       | *                | *        8       |         
45       15       *       | *                | *        8       |         
46       9        *       | *                | *        9       |         
47       3        *       | *                | *        9       |         
-----------------------------------------------------------------------------------
48       44       *       | *                | *        5       |         
49       38       *       | *                | *        6       |         
50       32       *       | *                | *        6       |         
51       26       *       | *                | *        6       |         
52       20       *       | *                | *        6       |         
53       14       *       | *                | *        6       |         
54       8        *       | *                | *        6       |         
55       2        *       | *                | *        5       |         
-----------------------------------------------------------------------------------
56       92       *       | *                | *        6       |         
57       86       *       | *                | *        6       |         
58       80       *       | *                | *        6       |         
59       74       *       | *                | *        6       |         
60       68       *       | *                | *        6       |         
61       62       *       | *                | *        6       |         
62       56       *       | *                | *        7       |         
63       50       *       | *                | *        7       |         
-----------------------------------------------------------------------------------
64       47       *       | *                | *        8       |         
65       41       *       | *                | *        8       |         
66       35       *       | *                | *        8       |         
67       29       *       | *                | *        7       |         
68       23       *       | *                | *        8       |         
69       17       *       | *                | *        8       |         
70       11       *       | *                | *        8       |         
71       5        *       | *                | *        8       |         
-----------------------------------------------------------------------------------
72       95       *       | *                | *        8       |         
73       89       *       | *                | *        8       |         
74       83       *       | *                | *        8       |         
75       77       *       | *                | *        8       |         
76       71       *       | *                | *        8       |         
77       65       *       | *                | *        8       |         
78       59       *       | *                | *        9       |         
79       53       *       | *                | *        9       |         
-----------------------------------------------------------------------------------
80       46       *       | *                | *        5       |         
81       40       *       | *                | *        6       |         
82       34       *       | *                | *        6       |         
83       28       *       | *                | *        6       |         
84       22       *       | *                | *        6       |         
85       16       *       | *                | *        6       |         
86       10       *       | *                | *        6       |         
87       4        *       | *                | *        5       |         
-----------------------------------------------------------------------------------
88       94       *       | *                | *        6       |         
89       88       *       | *                | *        6       |         
90       82       *       | *                | *        6       |         
91       76       *       | *                | *        6       |         
92       70       *       | *                | *        6       |         
93       64       *       | *                | *        6       |         
94       58       *       | *                | *        7       |         
95       52       *       | *                | *        7       |         
read -a 4 -t 0 -s 1 -l 8 -T 10 -m 3 -p 1 -C FFFFFFFF -D FFFFFFFF -E FFFFFFFF
('OPENING FILE', 'run_73.txt')
SETTING MODE TO  3
(105, 35)
{'AdcMode': 4,
 'Ch_mask1': '0b11111111111111111111111111111111',
 'Clock': 99,
 'EnablePulser': 1,
 'Mode': 0,
 'NumLookback': 8,
 'NumSamples': 1,
 'NumTriggers': 10,
 'TdcMode': 0,
 'TdcString': b'PULSER\x00\x00',
 'digi_read(0xb)': '0b1111111111111111',
 'digi_read(0xc)': '0b1',
 'digi_read(0xd)': '0b1111111111111111',
 'digi_read(0xe)': '0b1111111111111111'}
5
{'TriggerCount': 0, 'TriggerCountMatchNumTriggers': 0}
set_digi_rw   –s 0
 ** Disabling DIGI signals via serial, fiber is used by default.
(94, 1)
{'Enable/disable DIGI signals via SERIAL/FIBER with -s 1/0. Reading back: ': 0}
^CEnding...
#+end_src
#+begin_src                   readSPI                                        
set_digi_rw -s 1
readSPI
(10, 72)
{'A0': 872,
 'A1': 996,
 'A2': 1948,
 'A3': 980,
 'ADCSPARE': 0.89,
 'CALPCBTEMP': 38.99,
 'CAL_RAIL_1.8V(mV)': '1837.250',
 'CAL_RAIL_1V(mV)': '1045.625',
 'CAL_RAIL_2.5V(mV)': '2583.250',
 'CAL_TEMP(CELSIUS)': '35.9750',
 'HVPCBTEMP': 36.42,
 'HV_RAIL_1.8V(mV)': '1839.000',
 'HV_RAIL_1V(mV)': '1048.000',
 'HV_RAIL_2.5V(mV)': '2581.625',
 'HV_TEMP(CELSIUS)': '34.7250',
 'I1.2': 2.18,
 'I1.8CAL': 2.23,
 'I1.8HV': 2.01,
 'I2.5': 0.83,
 'I3.3': 0.46,
 'ICAL5.0': 0.06,
 'IHV5.0': 0.06,
 'ROCPCBTEMP': 24.49,
 'ROC_RAIL_1.8V(mV)': '1827.750',
 'ROC_RAIL_1V(mV)': '1035.875',
 'ROC_RAIL_2.5V(mV)': '2570.750',
 'ROC_TEMP(CELSIUS)': '30.6000',
 'RTD': 1.74,
 'V1.0': 1.06,
 'V1.8CAL': 1.84,
 'V1.8HV': 1.82,
 'V2.5': 2.57,
 'V3.3': 6.59,
 'V3.3HV': 3.31,
 'VCAL5.0': 4.87,
 'VDMBHV5.0': 4.88}
set_digi_rw -s 0
#+end_src 
* 2) on mu2edaq09, configure the ROC to receive data from all 4 lanes        
   
    15 = 0x1111 means ROC1/ROC/CAL1/CAL0 lanes are all enabled
    and clear counters in ROC logic which saw stuff during the -read command)

#+begin_src
./srcs/otsdaq_mu2e_tracker/scripts/var_link_config.sh 0 15
./srcs/otsdaq_mu2e_tracker/scripts/var_read_all.sh 0          # must return register 18 = 0xf00, ie all DIGIs FIFOs are empty
#+end_src

* 3) after taking some data DREQ and before sending next DREQs               

if the ROCFIFOs are empty (ie reg. 18 returns 0xf0X) are the end of run, just issue:

#+begin_src
./digi_clear.sh LANE_NO
#+end_src 

if register 18 reads some FIFOs not empty (ie something other than 0xf00), issue 

#+begin_src 
./rocfifo_clear.sh LINK_NO
#+end_src 

* 4) helpful DTC counters to read after a run                                

#+begin_src
   ./DTC_counters.sh
#+end_src

example of returned info for a run of 1000 events, with no CRC errors, 1 DREQ missed because of EWM on top of DREQ:

#+begin_quote
 #DTCReq: 0x000003e8 sts=0
 #HB:     0x000003f8 sts=0
 #DataHeader: 0x000003e7 sts=0
 #Payloads:   0x000289ea sts=0
 #CRC errors: 0x00000000 sts=0
#+end_quote
 
before next run, clear TDC counters with

#+begin_src
./DTC_clean.sh
#+end_src

* 5) annex test stands                                                       
** Teststand0 is connected to ttuUSB1                                        
- Power up and down with gpio 25
- No fiber connected (this can change if we want to)
- ROC FlashPro S201QNXR6
- HV DIGI FlashPro:  86129
- To program use ppd-138181
** Teststand1 is connected to ttyUSB0                                        
- Power up and down with gpio 27
- Fiber 1 connected to DTC 
- ROC FlashPro: S2001JWC9O
- CAL DIGI FlashPro: 95232
- To program use ppd-130027
** powering up the test stand                                                
#+begin_src
gpio mode  27 output         # turn on output mode
gpio write 27 1              # set pin 27 output level to high
gpio read  27
gpio write 27 0              # set output level to low 
#+end_src
* 6) VST data format                                                         

- 8x32-bit words OR 256 bits per hit (ie two DTC packets)
- hit data format: 3 words of  timestamp  +  5 words of payload 
- the first 16 bit of the timestamp contains the channels number (presently there is a bug for HV lanes I believe such that bit[15]=1)
- the channel to serdes lane mapping is as per attached file

- an example of the DIGIs readout after

read -a 4 -t 0 -s 1 -l 8 -T 10 -m 3 -p 1 -C 0  -D 1400 -E 88000000

 - 0x00000000: 0x00d0 0x0000 0x0000 0x0000 0x00c8 0x0000 0x1322 0x0000 : data header packet *go figure* 
     
    - w0 : 0x00d0 : - total number of bytes 
    - w1 : 0x0000 : - bit 15-08: valid + subsystem ID + reserved *go figure* 
                    - bit 07-04: packet type (0x5)
                    - bit 03-00: ROC link ID
    - w2 : 0x0000 : - bit 15-11: 000000  
                    - bit 10-00: packet count *bits or packets - go figure* 
    - w3 : 0x0000 : - bit 15-08: EWM byte 1, bit 07-00: EWM byte 0 
    - w4 : 0x00c8 : - bit 15-08: EWM byte 3, bit 07-00: EWM byte 2
    - w5 : 0x0000 : - bit 15-08: EWM byte 5, bit 07-00: EWM byte 4
    - w6 : 0x1322 : - bit 15-08: data packet format version                
                    - bit 07-00: data header status                        
                        - bit    00 : 1: data present, 0: no data in the event window
			- bit    01 : 1: ROC didn't receive a heartbit for this window
			- bit    02 : 1: data corrupt
			- bit    03 : 1: more data requests queued
			- bit 04-07 : reserved
    - w7 : 0x0000 : - bit 15-08: event window mode                         
                    - bit 07-00: DTC ID
 - 0x00000010: 0x0000 0xff01 0xffff 0xffff 0x0000 0x0000 0x0100 0x0000 : ???
 - 0x00000020: 0x00b0 0x0000 0x1322 0x0000 0x0000 0xff01 0xffff 0xffff : ???    *go figure* 
    - w0 : 0x00b0 : N(bytes) starting from this point
    - w1 : 0x0000 : 
    - w2 : 0x1322 :
    - w3 : 0x0000 :
    - w4 : 0x0000 :
    - w5 : 0xff01 :
    - w6 : 0xffff :
    - w7 : 0xffff :
 - 0x00000030: 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x0000 0x01ee : ???
 - 0x00000040: 0x0090 0x8050 0x0008 0x1322 0x0000 0x0000 0x0055 0x0000 : ???    *go figure* 
    - w0 : 0x0090 : N(bytes) starting from this point
    - w1 : 0x8050 : 
    - w2 : 0x0008 : N(packets) with the hit data
    - w3 : 0x0000 :
    - w4 : 0x0000 :
    - w5 : 0xff01 :
    - w6 : 0xffff :
    - w7 : 0xffff :
 - 0x00000050: 0x005b 0xb660 0x140b 0xb630 0x040b 0x0041 0xa955 0x155a : hit #1 data 
 - 0x00000060: 0x56aa 0x2aa5 0xa955 0x155a 0x56aa 0x2aa5 0xa955 0x155a : hit #1 data
 - 0x00000070: 0x002a 0xb66a 0x140b 0xb684 0x040b 0x0041 0xa955 0x155a : hit #2 data 
 - 0x00000080: 0x56aa 0x2aa5 0xa955 0x155a 0x56aa 0x2aa5 0xa955 0x155a : hit #2 data 
 - 0x00000090: 0x00de 0xe2ec 0x1306 0xe2df 0x0406 0x0041 0xa955 0x155a : hit #3 data 
 - 0x000000a0: 0x56aa 0x2aa5 0xa955 0x155a 0x56aa 0x2aa5 0xa955 0x155a : hit #3 data 
 - 0x000000b0: 0x00ac 0xe195 0x1406 0xe147 0x0406 0x0041 0x56aa 0x2aa5 : hit #4 data 
 - 0x000000c0: 0xa955 0x155a 0x56aa 0x2aa5 0xa955 0x155a 0x56aa 0x2aa5 : hit #4 data 
* 7) slow monitoring - ROC - readSPI over the fiber                          
- <2023-07-12 Wed> instructions by Monica                           
Essentially one needs to do a write to ROC address 258 (0x102) to collect a list of 36 ADCs values, 
and read them all back using a block read of the same address.
In between, there are a couple of diagnostic registers to read that will 
tell you whether the block read is ready to be executed.

How to interpret the 36 numbers read, and the conversion factor needed, 
is contained in the trackerScript/unpacker.py code, under READMONADCS.
The conversion factors listed at the end.

Enjoy!
Monica

1) rocUtil write_register -a 258 -w 0    # instructs microprocessor inside the firmware to read 36 ADC value
2) rocUtil simple_read    -a 128         # should return 0x8000 if 1) was successful
3) rocUtil simple_read    -a 129         # should return 40 (0x28) which is the number of ADC values collected in 1) plus 4
4) rocUtil block_read     -a 258 -c 36   # start a block read of 36 words

Example from DTC1:

mu2etrk@mu2edaq09:~/test_stand/monica_001>rocUtil write_register -a 258 -w 0
07-12 11:31:11.538389                           DTC_Registers     INFO DTC_Registers(...): Sim Mode is NoCFO
07-12 11:31:11.538510                           DTC_Registers     INFO DTC_Registers(...): DTC ID is 1
07-12 11:31:11.538522                           DTC_Registers     INFO SetSimMode(...): Initializing device, sim mode is NoCFO
07-12 11:31:11.551326                                 DTC.cpp     INFO DTC(...): CONSTRUCTOR
07-12 11:31:11.556697                                 DTC.cpp     INFO ~DTC(): DESTRUCTOR

mu2etrk@mu2edaq09:~/test_stand/monica_001>rocUtil simple_read -a 128
0 0x8000
mu2etrk@mu2edaq09:~/test_stand/monica_001>rocUtil simple_read -a 129
0 0x28
#+begin_src <2023-07-12 Wed> ROOT example #1                                 
root [0] DTCLib::DTC dtc(DTCLib::DTC_SimMode_NoCFO,-1,0x1,"");
07-12 14:26:09.959864                           DTC_Registers     INFO DTC_Registers(...): Sim Mode is NoCFO
07-12 14:26:09.959930                           DTC_Registers     INFO DTC_Registers(...): DTC ID is 1
07-12 14:26:09.959945                           DTC_Registers     INFO SetSimMode(...): Initializing device, sim mode is NoCFO
07-12 14:26:09.966937                           DTC_Registers     INFO SetSimMode(...): SKIPPING Initializing device
07-12 14:26:09.972616                                 DTC.cpp     INFO DTC(...): CONSTRUCTOR
root [1] using namespace DTCLib;
root [2] dtc.WriteROCRegister(DTCLib::DTC_Link_0,258,0x0000,false,100);
root [3] auto u = dtc.ReadROCRegister(DTC_Link_0,roc_address_t(128),100); printf("0x%04x\n",u);
0x8000
root [4] auto u = dtc.ReadROCRegister(DTC_Link_0,roc_address_t(129),100); printf("0x%04x\n",u);
0x0028
(int) 7
root [5] std::vector<uint16_t> dat;
root [6] dtc.ReadROCBlock(dat,DTC_Link_0,258,36,false,100)
root [7] printf("0x%04x\n",dat[0]);
0x0048
root [8] printf("0x%04x\n",dat[1]);
0x0080
root [9] printf("0x%04x\n",dat[2]);
0x0128
root [10] printf("0x%04x\n",dat[3]);
0x031c
#+end_src   
#+begin_src <2023-07-12 Wed> ROOT example #2                                 
root [0] .L srcs/otsdaq_mu2e_tracker/scripts/read_spi.C
root [1] read_spi()
07-12 16:56:55.400220                           DTC_Registers     INFO DTC_Registers(...): Sim Mode is NoCFO
07-12 16:56:55.400295                           DTC_Registers     INFO DTC_Registers(...): DTC ID is 1
07-12 16:56:55.400313                           DTC_Registers     INFO SetSimMode(...): Initializing device, sim mode is NoCFO
07-12 16:56:55.406936                           DTC_Registers     INFO SetSimMode(...): SKIPPING Initializing device
07-12 16:56:55.412049                                 DTC.cpp     INFO DTC(...): CONSTRUCTOR
0x8000
0x0028
 0x00000000: 0x0044 0x0080 0x0128 0x0324 0x0bd4 0x046c 0x0804 0x0638 
 0x00000010: 0x0350 0x03fc 0x0798 0x03a0 0x0144 0x013c 0x0328 0x0448 
 0x00000020: 0x0ffc 0x0bc8 0x0478 0x0290 0x012c 0x01c4 0x01e4 0x0868 
 0x00000030: 0x209e 0x391e 0x5075 0x131e 0x20cd 0x398a 0x50ba 0x133b 
 0x00000040: 0x20c0 0x3978 0x50ad 0x131d 
I3.3                 :      0.457
I2.5                 :      0.859
I1.8HV               :      1.987
IHV5.0               :      0.064
VDMBHV5.0            :      4.879
V1.8HV               :      1.824
V3.3HV               :      3.306
V2.5                 :      2.565
A0                   :    848.000
A1                   :   1020.000
A2                   :   1944.000
A3                   :    928.000
I1.8CAL              :      2.175
I1.2                 :      2.122
ICAL5.0              :      0.064
ADCSPARE             :      0.883
V3.3                 :      6.594
VCAL5.0              :      4.860
V1.8CAL              :      1.843
V1.0                 :      1.057
ROCPCBTEMP           :     24.170
HVPCBTEMP            :     36.416
CALPCBTEMP           :     38.994
RTD                  :      1.734
ROC_RAIL_1V(mV)      :   1043.750
ROC_RAIL_1.8V(mV)    :   1827.750
ROC_RAIL_2.5V(mV)    :   2574.625
ROC_TEMP(CELSIUS)    :     32.725
CAL_RAIL_1V(mV)      :   1049.625
CAL_RAIL_1.8V(mV)    :   1841.250
CAL_RAIL_2.5V(mV)    :   2583.250
CAL_TEMP(CELSIUS)    :     34.537
HV_RAIL_1V(mV)       :   1048.000
HV_RAIL_1.8V(mV)     :   1839.000
HV_RAIL_2.5V(mV)     :   2581.625
HV_TEMP(CELSIUS)     :     32.662
07-12 16:56:55.927739                                 DTC.cpp     INFO ~DTC(): DESTRUCTOR
#+end_src
* SPI data over the serial, unpacked                                         
#+begin_src
readSPI
(10, 72)
{'A0': 1012,
 'A1': 1244,
 'A2': 1952,
 'A3': 724,
 'ADCSPARE': 0.83,
 'CALPCBTEMP': 37.38,
 'CAL_RAIL_1.8V(mV)': '1841.250',
 'CAL_RAIL_1V(mV)': '1045.625',
 'CAL_RAIL_2.5V(mV)': '2579.250',
 'CAL_TEMP(CELSIUS)': '34.5375',
 'HVPCBTEMP': 34.48,
 'HV_RAIL_1.8V(mV)': '1839.000',
 'HV_RAIL_1V(mV)': '1044.125',
 'HV_RAIL_2.5V(mV)': '2581.625',
 'HV_TEMP(CELSIUS)': '31.9750',
 'I1.2': 2.15,
 'I1.8CAL': 2.18,
 'I1.8HV': 1.99,
 'I2.5': 0.86,
 'I3.3': 0.48,
 'ICAL5.0': 0.06,
 'IHV5.0': 0.06,
 'ROCPCBTEMP': 25.78,
 'ROC_RAIL_1.8V(mV)': '1827.750',
 'ROC_RAIL_1V(mV)': '1039.750',
 'ROC_RAIL_2.5V(mV)': '2566.750',
 'ROC_TEMP(CELSIUS)': '30.6000',
 'RTD': 1.73,
 'V1.0': 1.06,
 'V1.8CAL': 1.84,
 'V1.8HV': 1.82,
 'V2.5': 2.57,
 'V3.3': 6.59,
 'V3.3HV': 3.31,
 'VCAL5.0': 4.87,
 'VDMBHV5.0': 4.88}
#+end_src
-------------------------------------------------------------------------
* setting up preamps to generate pulses [by Vadim]                           
** 1) run control_ROC, find_alignment, exit                                  
#+begin_src 
python3 control_ROC /dev/ttyUSB1 115200
find_alignment
Ctrl-C
#+end_src 
  exiting at this point is important, otherwise the serial port will not work properly

** 2) run diagnostics                                                        
#+begin_src 
python3 diagnostic.py -m L -f test_20mV.dat -p /dev/ttyUSB1
#+end_src

** 3) login back to control_ROC, measure thresholds                          
#+begin_src 
python3 control_ROC /dev/ttyUSB1 115200
measure_thresholds                                
# (this should show the CAL thresholds (third column) about between
# 17-20mV ? there is one channel 28 that is nor working)
pulser_on -c 4 -d 1000 -y 200
# Charge injection works in modulo 8. In other words, -c 0 will pulse channels 0,8,16,etc. 
# In the example above, -c 4 will pulse channels 4, 12,20, etc. 
# Of course, there will be cross talk, so other channels will show, 
# but that can be easily rejected offline. 
#+end_src 

* older instruction (from pasha_005)                                         
1) chantsDataTestMonica.sh 

link configuration check: link=2 is up : 0x0100 : bit0=0 bit1=0 bit2=1

#+begin_src  # 0xf4 = 0x11110100
[mu2etrk@mu2edaq09 ots_pasha]$ my_cntl read 0x9140
0x000000f4
sts=0
#+end_src

>> writing 1 to r_11 (dev board) = lets start taking data

>>> 

rocUtil -a 11 -l $link read_register

my_cntl read 0x9140         # register DTC 
0x000c5
sts=0

           11000101 -- ROC mask: links #0 and #2 connected

rocUtil -a 0 -l $link read_register  # -1 'roc' 

mu2eUtil -help

mu2eUtil -q 10 -N buffer_test -r 0x1 -D 20000 -n 1  -f test.bit 

rocUtil -a 13 -l $link read_register       # number of requested , or zero if all read)
rocUtil -a 14 -l $link read_register       # last block          , or zero if all read
rocUtil -a 11 -l $link read_register       # 1: keep reading     , 0: all read 
rocUtil -a 11 -l $link write_register -w 1 # read again 
* ------------------------------------------------------------------------------
